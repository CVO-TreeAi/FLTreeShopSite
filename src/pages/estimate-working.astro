---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Get Your Free Estimate - The Tree Shop">
  <main style="background: linear-gradient(135deg, #1e3a8a, #1e40af); min-height: 100vh; padding: 2rem 0;">
    <div style="max-width: 600px; margin: 0 auto; padding: 0 1rem;">
      
      <div style="text-align: center; margin-bottom: 2rem;">
        <h1 style="font-size: 2.5rem; font-weight: 700; color: white; margin-bottom: 1rem;">
          Get Your Free Estimate
        </h1>
        <p style="font-size: 1.25rem; color: #bfdbfe;">
          Professional forestry services in Florida
        </p>
      </div>

      <div style="background: white; border-radius: 12px; padding: 2rem;">
        <form id="working-form">
          
          <div style="margin-bottom: 1.5rem;">
            <label style="display: block; font-weight: 600; color: #374151; margin-bottom: 0.5rem;">
              Your Name *
            </label>
            <input type="text" id="name" required style="width: 100%; border: 2px solid #d1d5db; border-radius: 8px; padding: 0.75rem; font-size: 1rem;" placeholder="John Smith" />
          </div>
          
          <div style="margin-bottom: 1.5rem;">
            <label style="display: block; font-weight: 600; color: #374151; margin-bottom: 0.5rem;">
              Phone *
            </label>
            <input type="tel" id="phone" required style="width: 100%; border: 2px solid #d1d5db; border-radius: 8px; padding: 0.75rem; font-size: 1rem;" placeholder="(555) 123-4567" />
          </div>
          
          <div style="margin-bottom: 1.5rem;">
            <label style="display: block; font-weight: 600; color: #374151; margin-bottom: 0.5rem;">
              Email *
            </label>
            <input type="email" id="email" required style="width: 100%; border: 2px solid #d1d5db; border-radius: 8px; padding: 0.75rem; font-size: 1rem;" placeholder="john@email.com" />
          </div>
          
          <div style="margin-bottom: 1.5rem;">
            <label style="display: block; font-weight: 600; color: #374151; margin-bottom: 0.5rem;">
              Project Address * 
            </label>
            <!-- Modern Google Places Element -->
            <gmp-place-autocomplete id="place-autocomplete" style="width: 100%;">
              <input
                id="address-input"
                type="text"
                required
                style="width: 100%; border: 2px solid #2563eb; border-radius: 8px; padding: 0.75rem; font-size: 1rem;"
                placeholder="Start typing your Florida address..."
              />
            </gmp-place-autocomplete>
            <p style="font-size: 0.875rem; color: #6b7280; margin-top: 0.5rem;">
              Complete address including city and state
            </p>
          </div>
          
          <div style="margin-bottom: 1.5rem;">
            <label style="display: block; font-weight: 600; color: #374151; margin-bottom: 0.5rem;">
              Project Size (Any Size OK)
            </label>
            <input type="text" id="acres" style="width: 100%; border: 2px solid #d1d5db; border-radius: 8px; padding: 0.75rem; font-size: 1rem;" placeholder="1.12, 5.7, 10 - any size works" />
          </div>
          
          <button type="submit" style="width: 100%; background: #2563eb; color: white; font-weight: 700; padding: 1rem; border-radius: 8px; border: none; font-size: 1.125rem; cursor: pointer;">
            Get My Free Estimate
          </button>
        </form>
        
        <div id="success" style="display: none; background: #dcfce7; border: 1px solid #16a34a; border-radius: 8px; padding: 1rem; margin-top: 1rem; text-align: center;">
          <div style="color: #16a34a; font-weight: 600;">‚úÖ Thank you! Your estimate request has been submitted.</div>
          <p style="color: #374151; margin: 0.5rem 0 0 0; font-size: 0.875rem;">We'll contact you within 4 hours.</p>
        </div>
      </div>

    </div>
  </main>
</Layout>

<!-- New Google Maps with Extended Elements -->
<script>
  (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=`https://maps.googleapis.com/maps/api/js?`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
    key: "AIzaSyCfpqXu-EQV5MWIFBodDFB1K3VZtz1kF5A",
    v: "weekly",
  });
</script>

<script>
  let map, infoWindow;

  async function initMap() {
    console.log('üó∫Ô∏è Modern Google Maps loading...');
    
    // Import the libraries
    const { Map } = await google.maps.importLibrary("maps");
    const { PlaceAutocompleteElement } = await google.maps.importLibrary("places");
    
    // Set up the modern autocomplete element
    const autocomplete = document.getElementById('place-autocomplete');
    const addressInput = document.getElementById('address-input');
    
    // Configure for Florida addresses only
    autocomplete.componentRestrictions = { country: 'US', administrativeArea: 'FL' };
    autocomplete.fields = ['formatted_address', 'geometry', 'address_components'];
    autocomplete.types = ['address'];
    
    // Listen for place selection
    autocomplete.addEventListener('place_changed', () => {
      const place = autocomplete.getPlace();
      
      if (place && place.geometry) {
        console.log('‚úÖ Address selected:', place.formatted_address);
        addressInput.value = place.formatted_address;
        
        // Validate it's in Florida
        const isInFlorida = place.address_components.some(
          component => component.types.includes('administrative_area_level_1') && component.short_name === 'FL'
        );
        
        if (!isInFlorida) {
          alert('Service area limited to Florida addresses only');
          addressInput.value = '';
          return;
        }
      } else {
        console.log('‚ö†Ô∏è No geometry data for selected place');
      }
    });
    
    console.log('‚úÖ Modern address autocomplete ready');
    
    // Form handling
    const form = document.getElementById('working-form');
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const formData = {
        name: document.getElementById('name').value,
        phone: document.getElementById('phone').value,
        email: document.getElementById('email').value,
        address: document.getElementById('address-input').value,
        acres: document.getElementById('acres').value
      };
      
      if (!formData.name || !formData.phone || !formData.email || !formData.address) {
        alert('Please fill in all required fields');
        return;
      }
      
      console.log('Submitting lead:', formData);
      
      // Show success
      document.getElementById('success').style.display = 'block';
      form.style.display = 'none';
      
      // Send to Terminal using EXACT specification
      try {
        const response = await fetch('https://earnest-lemming-634.convex.cloud/api/mutation', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            path: 'leads:createLead',
            args: {
              name: formData.name,
              email: formData.email,
              phone: formData.phone,
              source: 'fltreeshop.com',
              status: 'new',
              createdAt: Date.now()
            }
          })
        });
        
        const result = await response.text();
        console.log('Terminal response:', result);
        
        if (response.ok) {
          console.log('‚úÖ Lead sent to Terminal successfully');
        } else {
          console.log('‚ö†Ô∏è Terminal response error:', result);
        }
        
      } catch (error) {
        console.log('‚ö†Ô∏è Terminal connection error:', error);
      }
    });
  }

  initMap();
</script>